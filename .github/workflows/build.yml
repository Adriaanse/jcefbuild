name: build

on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'Git repository to clone'
        required: true
        default: 'https://bitbucket.org/chromiumembedded/java-cef.git'
      ref:
        description: 'Git commit id to checkout'
        required: true
        default: 'master'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Generate release info
        run: |
          cd tools
          chmod +x create_release_info.sh
          ./create_release_info.sh ${{ github.event.inputs.repo }} ${{ github.event.inputs.ref }} https://github.com/${{github.repository}}/actions/runs/${{github.run_id}} ${{github.run_number}}
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{env.release_name}}
          body_path: tools/release_message.md
      - name: Add LICENSE
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: tools/LICENSE
          asset_name: LICENSE
          asset_content_type: text/plain
      - name: Add build_meta.json       
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: tools/build_meta.json                                                           
          asset_name: build_meta.json                                     
          asset_content_type: application/json


  linux-amd64:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Build
        run: |
          chmod +x compile_linux.sh
          ./compile_linux.sh amd64 Release ${{ github.event.inputs.repo }} ${{ github.event.inputs.ref }}
      - name: Export distribution
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: out/binary_distrib.tar.gz
          asset_name: linux-amd64.tar.gz
          asset_content_type: application/octet-stream


  linux-i386:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Build
        run: |
          chmod +x compile_linux.sh
          ./compile_linux.sh 386 Release ${{ github.event.inputs.repo }} ${{ github.event.inputs.ref }}
      - name: Export distribution
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: out/binary_distrib.tar.gz
          asset_name: linux-i386.tar.gz
          asset_content_type: application/octet-stream


  windows-amd64:
    runs-on: windows-2019
    needs: create-release
    steps:
      - uses: actions/checkout@v1
      -
        name: Build
        shell: cmd
        run: |
          compile_windows.bat amd64 Release
      - name: Export distribution
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: out/binary_distrib.tar.gz
          asset_name: windows-amd64.tar.gz
          asset_content_type: application/octet-stream


  windows-i386:
    runs-on: windows-2019
    needs: create-release
    steps:
      - uses: actions/checkout@v1
      -
        name: Build
        shell: cmd
        run: |
          compile_windows.bat 386 Release
      - name: Export distribution
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: out/binary_distrib.tar.gz
          asset_name: windows-i386.tar.gz
          asset_content_type: application/octet-stream


  macosx-amd64:
    runs-on: macos-10.15
    needs: create-release
    steps:
      - uses: actions/checkout@v1
      -
        name: Setup environment
        run: |
          chmod +x scripts/install_macos_dependencies.sh
          ./scripts/install_macos_dependencies.sh
      -
        name: Build
        run: |
          chmod +x compile_macosx.sh
          ./compile_macosx.sh amd64 Release
      - name: Export distribution
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: out/binary_distrib.tar.gz
          asset_name: macosx-amd64.tar.gz
          asset_content_type: application/octet-stream


  macosx-arm64:
    runs-on: macos-10.15
    needs: create-release
    steps:
      - uses: actions/checkout@v1
      -
        name: Setup environment
        run: |
          chmod +x scripts/install_macos_dependencies.sh
          ./scripts/install_macos_dependencies.sh
      -
        name: Build
        run: |
          chmod +x compile_macosx.sh
          ./compile_macosx.sh arm64 Release
      - name: Export distribution
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: out/binary_distrib.tar.gz
          asset_name: macosx-arm64.tar.gz
          asset_content_type: application/octet-stream
